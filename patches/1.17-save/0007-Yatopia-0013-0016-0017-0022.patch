From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: NCT skyouo <anwugame@gmail.com>
Date: Wed, 7 Jul 2021 23:43:18 +0800
Subject: [PATCH] Yatopia 0013 0016 0017 0022


diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index bcff2f13b1f3687428f9ac068efb616902a256df..16eb9f38d729349e71b14b5a32e0bb50427d4796 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -759,11 +759,21 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Worl
             this.server.getPlayerList().sendAll(new PacketPlayOutGameStateChange(PacketPlayOutGameStateChange.THUNDER_LEVEL_CHANGE, this.thunderLevel));
         }
         // */
-        for (int idx = 0; idx < this.players.size(); ++idx) {
-            if (((ServerPlayer) this.players.get(idx)).level == this) {
-                ((ServerPlayer) this.players.get(idx)).tickWeather();
+        // Brilliant start - From Yatopia
+        boolean sleepyMatch = true;
+        for (ServerPlayer player : players) {
+            if (player.level == this) {
+                player.tickWeather();
+                if (flag != this.isRaining()) player.setPlayerWeather((!flag ? WeatherType.DOWNFALL : WeatherType.CLEAR), false);
+                player.updateWeather(this.oRainLevel, this.rainLevel, this.oThunderLevel, this.thunderLevel);
+            }
+            if (sleepyMatch && !player.isSpectator() && !player.isSleepingLongEnough() && !player.fauxSleeping) {
+                sleepyMatch = false;
             }
         }
+        // Brilliant end - From Yatopia
+
+        /* // Brilliant start - From Yatopia - moved up
 
         if (flag != this.isRaining()) {
             // Only send weather packets to those affected
@@ -779,9 +789,10 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Worl
             }
         }
         // CraftBukkit end
+        */ // Brilliant end - From Yatopia - moved up
 
         i = this.getGameRules().getInt(GameRules.RULE_PLAYERS_SLEEPING_PERCENTAGE);
-        if (this.purpurConfig.playersSkipNight && this.sleepStatus.areEnoughSleeping(i) && this.sleepStatus.areEnoughDeepSleeping(i, this.players)) {
+        if (this.purpurConfig.playersSkipNight && sleepyMatch) { // Brilliant // Purpur
             // CraftBukkit start
             long l = this.levelData.getDayTime() + 24000L;
             TimeSkipEvent event = new TimeSkipEvent(this.getWorld(), TimeSkipEvent.SkipReason.NIGHT_SKIP, (l - l % 24000L) - this.getDayTime());
@@ -2544,8 +2555,9 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Worl
             // Spigot start
             if ( entity instanceof Player )
             {
-                ServerLevel.this.getServer().levels.values().stream().map( ServerLevel::getDataStorage ).forEach( (worldData) ->
+                for ( ServerLevel level : getServer().levels.values() ) // Brilliant - Yatopia
                 {
+                    DimensionDataStorage worldData = level.getDataStorage();
                     for (Object o : worldData.cache.values() )
                     {
                         if ( o instanceof MapItemSavedData )
@@ -2562,8 +2574,8 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Worl
                             }
                         }
                     }
-                } );
-            }
+                }
+            } // Brilliant - From Yatopia
             // Spigot end
             // Spigot Start
             if (entity.getBukkitEntity() instanceof org.bukkit.inventory.InventoryHolder) {
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 60ed79b333c46ddb6685301d5037f37384f7decb..a3d7ba10e424f0b63a1bb80014bf84886604724d 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -98,6 +98,7 @@ import org.bukkit.craftbukkit.block.data.CraftBlockData;
 import org.bukkit.craftbukkit.util.CraftNamespacedKey;
 import org.bukkit.event.block.BlockPhysicsEvent;
 import org.bukkit.event.world.GenericGameEvent;
+import tech.skyouo.brilliant.HashedList;
 // CraftBukkit end
 
 public abstract class Level implements LevelAccessor, AutoCloseable {
@@ -115,8 +116,9 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     public static final int TICKS_PER_DAY = 24000;
     public static final int MAX_ENTITY_SPAWN_Y = 20000000;
     public static final int MIN_ENTITY_SPAWN_Y = -20000000;
-    protected final List<TickingBlockEntity> blockEntityTickers = Lists.newArrayList(); public final int getTotalTileEntityTickers() { return this.blockEntityTickers.size(); } // Paper
-    private final List<TickingBlockEntity> pendingBlockEntityTickers = Lists.newArrayList();
+    protected final List<TickingBlockEntity> blockEntityTickers = HashedList.wrapper(Lists.newArrayList());
+    private final List<TickingBlockEntity> pendingBlockEntityTickers = HashedList.wrapper(Lists.newArrayList());
+    public final int getTotalTileEntityTickers() { return this.blockEntityTickers.size(); } // Paper
     private boolean tickingBlockEntities;
     public final Thread thread;
     private final boolean isDebug;
diff --git a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index fb3f7e821224889b08c0f424d79e122cba9d0645..17796f967b409d264b94b098843de4db4e0b6496 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -52,10 +52,11 @@ import org.bukkit.event.block.BlockExpEvent;
 import org.bukkit.event.inventory.FurnaceBurnEvent;
 import org.bukkit.event.inventory.FurnaceExtractEvent;
 import org.bukkit.event.inventory.FurnaceSmeltEvent;
+import org.bukkit.inventory.CookingRecipe;
 // CraftBukkit end
 
 public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntity implements WorldlyContainer, RecipeHolder, StackedContentsCompatible {
-
+    private static AbstractFurnaceBlockEntity self;
     protected static final int SLOT_INPUT = 0;
     protected static final int SLOT_FUEL = 1;
     protected static final int SLOT_RESULT = 2;
@@ -81,6 +82,7 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
 
     protected AbstractFurnaceBlockEntity(BlockEntityType<?> blockEntityType, BlockPos pos, BlockState state, RecipeType<? extends AbstractCookingRecipe> recipeType) {
         super(blockEntityType, pos, state);
+        self = this;
         this.items = NonNullList.withSize(3, ItemStack.EMPTY);
         this.dataAccess = new ContainerData() {
             @Override
@@ -339,7 +341,10 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
                 blockEntity.cookingProgress = Mth.clamp(blockEntity.cookingProgress - 2, 0, blockEntity.cookingTotalTime);
             }
         } else {
-            Recipe<?> irecipe = (Recipe) world.getRecipeManager().getRecipeFor((RecipeType<AbstractCookingRecipe>) blockEntity.recipeType, blockEntity, world).orElse(null); // CraftBukkit - decompile error // Eclipse fail
+            // Brilliant start - From Yatopia - used cached recipe if possible, otherwise look up
+            Recipe<?> irecipe = self.getCurrentRecipe();
+            if (irecipe == null) irecipe = (Recipe) world.getRecipeManager().getRecipeFor((RecipeType<AbstractCookingRecipe>) blockEntity.recipeType, blockEntity, world).orElse(null); // CraftBukkit - decompile error // Eclipse fail
+            // Brilliant End
             int i = blockEntity.getMaxStackSize();
 
             if (!blockEntity.isLit() && AbstractFurnaceBlockEntity.canBurn(irecipe, blockEntity.items, i)) {
@@ -660,6 +665,19 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
 
             finder.accountStack(itemstack);
         }
+    }
 
+    // Brilliant start - From Yatopia - cache recipe
+    private Recipe cachedRecipe = null;
+
+    @Override
+    public Recipe getCurrentRecipe() {
+        return cachedRecipe;
+    }
+
+    @Override
+    public void setCurrentRecipe(Recipe recipe) {
+        cachedRecipe = recipe;
     }
+    // Brilliant end
 }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/FurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/FurnaceBlockEntity.java
index fe66c42084da7039679dc1470a3800365d0d80ff..208337e9c41042969f917ed1ad5f0205102fc9c6 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/FurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/FurnaceBlockEntity.java
@@ -1,2 +1,26 @@
-package net.minecraft.world.level.block.entity;public class FurnaceBlockEntity {
+package net.minecraft.world.level.block.entity;
+
+import net.minecraft.core.BlockPos;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.TranslatableComponent;
+import net.minecraft.world.entity.player.Inventory;
+import net.minecraft.world.inventory.AbstractContainerMenu;
+import net.minecraft.world.inventory.FurnaceMenu;
+import net.minecraft.world.item.crafting.RecipeType;
+import net.minecraft.world.level.block.state.BlockState;
+
+public class FurnaceBlockEntity extends AbstractFurnaceBlockEntity {
+    public FurnaceBlockEntity(BlockPos pos, BlockState state) {
+        super(BlockEntityType.FURNACE, pos, state, RecipeType.SMELTING);
+    }
+
+    @Override
+    protected Component getDefaultName() {
+        return new TranslatableComponent("container.furnace");
+    }
+
+    @Override
+    protected AbstractContainerMenu createMenu(int syncId, Inventory playerInventory) {
+        return new FurnaceMenu(syncId, playerInventory, this, this.dataAccess);
+    }
 }
diff --git a/src/main/java/tech/skyouo/brilliant/HashedList.java b/src/main/java/tech/skyouo/brilliant/HashedList.java
index 459e5295aad4652f35936911d6e4be027f829718..3a22ac438abbc13fdccc7a95fd5e50b2d52fcfa2 100644
--- a/src/main/java/tech/skyouo/brilliant/HashedList.java
+++ b/src/main/java/tech/skyouo/brilliant/HashedList.java
@@ -1,2 +1,282 @@
-package tech.skyouo.brilliant;public class HashedList {
+// From Yatopia - From Lithium
+
+package tech.skyouo.brilliant;
+
+import it.unimi.dsi.fastutil.objects.Reference2IntOpenHashMap;
+import it.unimi.dsi.fastutil.objects.ReferenceArrayList;
+import java.util.Collection;
+import java.util.Iterator;
+import java.util.List;
+import java.util.ListIterator;
+import java.util.NoSuchElementException;
+
+/**
+ * Wraps a {@link List} with a hash table which provides O(1) lookups for {@link Collection#contains(Object)}. The type
+ * contained by this list must use reference-equality semantics.
+ */
+@SuppressWarnings("SuspiciousMethodCalls")
+public class HashedList<T> implements List<T> {
+    private final ReferenceArrayList<T> list;
+    private final Reference2IntOpenHashMap<T> counter;
+
+    public HashedList(List<T> list) {
+        this.list = new ReferenceArrayList<>();
+        this.list.addAll(list);
+
+        this.counter = new Reference2IntOpenHashMap<>();
+        this.counter.defaultReturnValue(0);
+
+        for (T obj : this.list) {
+            this.counter.addTo(obj, 1);
+        }
+    }
+
+    @Override
+    public int size() {
+        return this.list.size();
+    }
+
+    @Override
+    public boolean isEmpty() {
+        return this.list.isEmpty();
+    }
+
+    @Override
+    public boolean contains(Object o) {
+        return this.counter.containsKey(o);
+    }
+
+    @Override
+    public Iterator<T> iterator() {
+        return this.listIterator();
+    }
+
+    @Override
+    public Object[] toArray() {
+        return this.list.toArray();
+    }
+
+    @SuppressWarnings("SuspiciousToArrayCall")
+    @Override
+    public <T1> T1[] toArray(T1[] a) {
+        return this.list.toArray(a);
+    }
+
+    @Override
+    public boolean add(T t) {
+        this.trackReferenceAdded(t);
+
+        return this.list.add(t);
+    }
+
+    @Override
+    public boolean remove(Object o) {
+        this.trackReferenceRemoved(o);
+
+        return this.list.remove(o);
+    }
+
+    @Override
+    public boolean containsAll(Collection<?> c) {
+        for (Object obj : c) {
+            if (!this.counter.containsKey(obj)) {
+                return false;
+            }
+        }
+
+        return true;
+    }
+
+    @Override
+    public boolean addAll(Collection<? extends T> c) {
+        for (T obj : c) {
+            this.trackReferenceAdded(obj);
+        }
+
+        return this.list.addAll(c);
+    }
+
+    @Override
+    public boolean addAll(int index, Collection<? extends T> c) {
+        for (T obj : c) {
+            this.trackReferenceAdded(obj);
+        }
+
+        return this.list.addAll(index, c);
+    }
+
+    @Override
+    public boolean removeAll(Collection<?> c) {
+        for (Object obj : c) {
+            this.trackReferenceRemoved(obj);
+        }
+
+        return this.list.removeAll(c);
+    }
+
+    @Override
+    public boolean retainAll(Collection<?> c) {
+        return this.list.retainAll(c);
+    }
+
+    @Override
+    public void clear() {
+        this.counter.clear();
+        this.list.clear();
+    }
+
+    @Override
+    public T get(int index) {
+        return this.list.get(index);
+    }
+
+    @Override
+    public T set(int index, T element) {
+        T prev = this.list.set(index, element);
+
+        if (prev != element) {
+            if (prev != null) {
+                this.trackReferenceRemoved(prev);
+            }
+
+            this.trackReferenceAdded(element);
+        }
+
+        return prev;
+    }
+
+    @Override
+    public void add(int index, T element) {
+        this.trackReferenceAdded(element);
+
+        this.list.add(index, element);
+    }
+
+    @Override
+    public T remove(int index) {
+        T prev = this.list.remove(index);
+
+        if (prev != null) {
+            this.trackReferenceRemoved(prev);
+        }
+
+        return prev;
+    }
+
+    @Override
+    public int indexOf(Object o) {
+        return this.list.indexOf(o);
+    }
+
+    @Override
+    public int lastIndexOf(Object o) {
+        return this.list.lastIndexOf(o);
+    }
+
+    @Override
+    public ListIterator<T> listIterator() {
+        return this.listIterator(0);
+    }
+
+    @Override
+    public ListIterator<T> listIterator(int index) {
+        return new ListIterator<T>() {
+            private final ListIterator<T> inner = HashedList.this.list.listIterator(index);
+
+            @Override
+            public boolean hasNext() {
+                return this.inner.hasNext();
+            }
+
+            @Override
+            public T next() {
+                return this.inner.next();
+            }
+
+            @Override
+            public boolean hasPrevious() {
+                return this.inner.hasPrevious();
+            }
+
+            @Override
+            public T previous() {
+                return this.inner.previous();
+            }
+
+            @Override
+            public int nextIndex() {
+                return this.inner.nextIndex();
+            }
+
+            @Override
+            public int previousIndex() {
+                return this.inner.previousIndex();
+            }
+
+            @Override
+            public void remove() {
+                int last = this.previousIndex();
+
+                if (last == -1) {
+                    throw new NoSuchElementException();
+                }
+
+                T prev = HashedList.this.get(last);
+
+                if (prev != null) {
+                    HashedList.this.trackReferenceRemoved(prev);
+                }
+
+                this.inner.remove();
+            }
+
+            @Override
+            public void set(T t) {
+                int last = this.previousIndex();
+
+                if (last == -1) {
+                    throw new NoSuchElementException();
+                }
+
+                T prev = HashedList.this.get(last);
+
+                if (prev != t) {
+                    if (prev != null) {
+                        HashedList.this.trackReferenceRemoved(prev);
+                    }
+
+                    HashedList.this.trackReferenceAdded(t);
+                }
+
+                this.inner.remove();
+            }
+
+            @Override
+            public void add(T t) {
+                HashedList.this.trackReferenceAdded(t);
+
+                this.inner.add(t);
+            }
+        };
+    }
+
+    @Override
+    public List<T> subList(int fromIndex, int toIndex) {
+        return this.list.subList(fromIndex, toIndex);
+    }
+
+    private void trackReferenceAdded(T t) {
+        this.counter.addTo(t, 1);
+    }
+
+    @SuppressWarnings("unchecked")
+    private void trackReferenceRemoved(Object o) {
+        if (this.counter.addTo((T) o, -1) <= 1) {
+            this.counter.removeInt(o);
+        }
+    }
+
+    public static <T> HashedList<T> wrapper(List<T> list) {
+        return new HashedList<>(list);
+    }
 }
