From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: skyouo0727 <anwugame@gmail.com>
Date: Sat, 19 Feb 2022 19:46:10 +0800
Subject: [PATCH] Yatopia Optimize Furnance Fuel And Recipe Lookups


diff --git a/src/main/java/co/aikar/timings/TimingsExport.java b/src/main/java/co/aikar/timings/TimingsExport.java
index 11e70e04dc51ed21008e4ad49eb1da688a50f55a..cc501b13c4ce342a527b1f4f1cb32a58e9a2436c 100644
--- a/src/main/java/co/aikar/timings/TimingsExport.java
+++ b/src/main/java/co/aikar/timings/TimingsExport.java
@@ -230,7 +230,7 @@ public class TimingsExport extends Thread {
             pair("bukkit", mapAsJSON(Bukkit.spigot().getBukkitConfig(), null)),
             pair("paper", mapAsJSON(Bukkit.spigot().getPaperConfig(), null)), // Pufferfish
             pair("pufferfish", mapAsJSON(gg.pufferfish.pufferfish.PufferfishConfig.getConfigCopy(), null)), // Pufferfish
-            pair("brilliant", mapAsJSON(BrilliantConfig.config, null))
+            pair("brilliant", mapAsJSON(BrilliantConfig.config, null)) // Brilliant
         ));
 
         new TimingsExport(listeners, parent, history).start();
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 1055002a8d9af532892f7639a851bfb676b89860..bce5c6b61150ccc54de656c8dd4186e768f34f6a 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -235,8 +235,6 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         gg.pufferfish.pufferfish.PufferfishConfig.load(); // Pufferfish
         gg.pufferfish.pufferfish.PufferfishCommand.init(); // Pufferfish
 
-        tech.skyouo.brilliant.BrilliantConfig.lateInit(); // Brilliant
-
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
         this.setResourcePack(dedicatedserverproperties.resourcePack, this.getPackHash());
@@ -350,6 +348,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             }
 
             if (gg.pufferfish.pufferfish.PufferfishConfig.enableAsyncMobSpawning) mobSpawnExecutor.start(); // Pufferfish
+            tech.skyouo.brilliant.BrilliantConfig.lateInit(); // Brilliant
             return true;
         }
     }
diff --git a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
index fb15ece736dde16066818216749fb2efba0b3b21..70a3ed65c8f70fe517218ac1d5e26d224c39436c 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/AbstractFurnaceBlockEntity.java
@@ -323,7 +323,10 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
                 blockEntity.cookingProgress = Mth.clamp(blockEntity.cookingProgress - 2, (int) 0, blockEntity.cookingTotalTime);
             }
         } else {
-            Recipe<?> irecipe = (Recipe) world.getRecipeManager().getRecipeFor((RecipeType<AbstractCookingRecipe>) blockEntity.recipeType, blockEntity, world).orElse(null); // CraftBukkit - decompile error // Eclipse fail
+            // Brilliant - Port Yatopia start - used cached recipe if possible, otherwise look up
+            Recipe<?> irecipe = blockEntity.getCurrentRecipe();
+            if (irecipe == null) irecipe = (Recipe) world.getRecipeManager().getRecipeFor((RecipeType<AbstractCookingRecipe>) blockEntity.recipeType, blockEntity, world).orElse(null); // CraftBukkit - decompile error // Eclipse fail
+            // Brilliant - Port Yatopia end
             int i = blockEntity.getMaxStackSize();
 
             if (!blockEntity.isLit() && AbstractFurnaceBlockEntity.canBurn(irecipe, blockEntity.items, i)) {
@@ -657,4 +660,19 @@ public abstract class AbstractFurnaceBlockEntity extends BaseContainerBlockEntit
         }
 
     }
+
+    // Brilliant - Port Yatopia start - cache recipe
+    private Recipe cachedRecipe = null;
+
+    @Override
+    public Recipe getCurrentRecipe() {
+        return cachedRecipe;
+    }
+
+    @Override
+    public void setCurrentRecipe(Recipe recipe) {
+        System.out.println(this + " updated cache");
+        cachedRecipe = recipe;
+    }
+    // Brilliant - Port Yatopia end
 }
