From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: skyouo0727 <anwugame@gmail.com>
Date: Tue, 8 Mar 2022 19:42:23 +0800
Subject: [PATCH] Unlocking TPS Limit


diff --git a/src/main/java/com/destroystokyo/paper/MSPTCommand.java b/src/main/java/com/destroystokyo/paper/MSPTCommand.java
index d0211d4f39f9d6af1d751ac66342b42cc6d7ba6d..51767d5d713ed4640018fe45f78d81c020849dd3 100644
--- a/src/main/java/com/destroystokyo/paper/MSPTCommand.java
+++ b/src/main/java/com/destroystokyo/paper/MSPTCommand.java
@@ -59,6 +59,6 @@ public class MSPTCommand extends Command {
     }
 
     private static String getColor(double avg) {
-        return ChatColor.COLOR_CHAR + (avg >= 50 ? "c" : avg >= 40 ? "e" : "a") + DF.format(avg);
+        return ChatColor.COLOR_CHAR + (avg >= (MinecraftServer.MS_PER_TICK * 1.1) ? "c" : avg >= MinecraftServer.MS_PER_TICK ? "e" : "a") + DF.format(avg);
     }
 }
diff --git a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
index fa56cd09102a89692b42f1d14257990508c5c720..514eaf5bced00bc9f6b79879dfdad76afe7a119d 100644
--- a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
+++ b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
@@ -81,6 +81,6 @@ public class RAMDetails extends JList<String> {
     }
 
     private static String format(double tps) {
-        return ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 );
+        return ( ( tps > MinecraftServer.TPS ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, MinecraftServer.TPS );
     }
 }
diff --git a/src/main/java/net/minecraft/server/Main.java b/src/main/java/net/minecraft/server/Main.java
index 1e0d261439255091a6f61485c0747231fbd5b1db..8f51e607b1503c60845fb2f26fdd6f804c745a15 100644
--- a/src/main/java/net/minecraft/server/Main.java
+++ b/src/main/java/net/minecraft/server/Main.java
@@ -159,6 +159,8 @@ public class Main {
             LevelStorageSource.LevelStorageAccess convertable_conversionsession = convertable.createAccess(s, LevelStem.OVERWORLD);
             LevelSummary worldinfo = convertable_conversionsession.getSummary();
 
+            tech.skyouo.brilliant.BrilliantConfig.init(); // Brilliant - Load before MinecraftServer was created
+
             if (worldinfo != null) {
                 if (worldinfo.requiresManualConversion()) {
                     Main.LOGGER.info("This world must be opened in an older version (like 1.6.4) to be safely converted");
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index e937ea026157e51fd46b14a5db8627439bc4e9f3..9b12fbc18d7be98d1eedd5bae8773715354a7ce4 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -185,6 +185,7 @@ import org.bukkit.event.server.ServerLoadEvent;
 
 import co.aikar.timings.MinecraftTimings; // Paper
 import org.spigotmc.SlackActivityAccountant; // Spigot
+import tech.skyouo.brilliant.BrilliantConfig;
 
 public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTask> implements CommandSource, AutoCloseable {
 
@@ -193,7 +194,6 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public static final String VANILLA_BRAND = "vanilla";
     private static final float AVERAGE_TICK_TIME_SMOOTHING = 0.8F;
     private static final int TICK_STATS_SPAN = 100;
-    public static final int MS_PER_TICK = 50;
     private static final int OVERLOADED_THRESHOLD = 2000;
     private static final int OVERLOADED_WARNING_INTERVAL = 15000;
     public static final String LEVEL_STORAGE_PROTOCOL = "level";
@@ -300,9 +300,10 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public boolean forceTicks; // Paper
     // CraftBukkit end
     // Spigot start
-    public static final int TPS = 20;
-    public static final int TICK_TIME = 1000000000 / MinecraftServer.TPS;
-    private static final int SAMPLE_INTERVAL = 20; // Paper
+    public static final int TPS = BrilliantConfig.tpsLimit; // Brilliant
+    public static final int TICK_TIME = 1000000000 / MinecraftServer.TPS; // Brilliant
+    public static final double MS_PER_TICK = (double) 1000 / BrilliantConfig.tpsLimit; // Brilliant
+    private static final int SAMPLE_INTERVAL = BrilliantConfig.tpsLimit; // Paper // Brilliant
     public final double[] recentTps = new double[ 3 ];
     public final SlackActivityAccountant slackActivityAccountant = new SlackActivityAccountant();
     // Spigot end
@@ -1190,8 +1191,8 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 while (this.running) {
                     long i = ((curTime = System.nanoTime()) / (1000L * 1000L)) - this.nextTickTime; // Paper
 
-                    if (i > 5000L && this.nextTickTime - this.lastOverloadWarning >= 30000L) { // CraftBukkit
-                        long j = i / 50L;
+                    if (i > (100L * MS_PER_TICK) && this.nextTickTime - this.lastOverloadWarning >= (600L * MS_PER_TICK)) { // CraftBukkit
+                        double j = i / MS_PER_TICK;
 
                         if (this.server.getWarnOnOverload()) // CraftBukkit
                             MinecraftServer.LOGGER.warn("Can't keep up! Is the server overloaded? Running {}ms or {} ticks behind", i, j);
@@ -1223,13 +1224,13 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
                     //MinecraftServer.currentTick = (int) (System.currentTimeMillis() / 50); // CraftBukkit // Paper - don't overwrite current tick time
                     lastTick = curTime;
-                    this.nextTickTime += 50L;
+                    this.nextTickTime += MS_PER_TICK;
                     this.startMetricsRecordingTick();
                     this.profiler.push("tick");
                     this.tickServer(this::haveTime);
                     this.profiler.popPush("nextTickWait");
                     this.mayHaveDelayedTasks = true;
-                    this.delayedTasksMaxNextTickTime = Math.max(Util.getMillis() + 50L, this.nextTickTime);
+                    this.delayedTasksMaxNextTickTime = (long) Math.max(Util.getMillis() + MS_PER_TICK, this.nextTickTime);
                     this.waitUntilNextTick();
                     this.profiler.pop();
                     this.endMetricsRecordingTick();
@@ -1458,7 +1459,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
         ++this.tickCount;
         this.tickChildren(shouldKeepTicking);
-        if (i - this.lastServerStatus >= 5000000000L) {
+        if (i - this.lastServerStatus >= (MS_PER_TICK * 100000000L)) {
             this.lastServerStatus = i;
             this.status.setPlayers(new ServerStatus.Players(this.getMaxPlayers(), this.getPlayerCount()));
             if (!this.hidesOnlinePlayers()) {
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index 27e90ca03275a42271bbe97ee1a63a355b098ede..ad5c0cac7c5cec6b2b44b64577021d9f99d1ba3d 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -238,6 +238,8 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         gg.pufferfish.pufferfish.PufferfishConfig.load(); // Pufferfish
         gg.pufferfish.pufferfish.PufferfishCommand.init(); // Pufferfish
 
+        tech.skyouo.brilliant.BrilliantConfig.lateInit(); // Brilliant
+
         this.setPvpAllowed(dedicatedserverproperties.pvp);
         this.setFlightAllowed(dedicatedserverproperties.allowFlight);
         this.setResourcePack(dedicatedserverproperties.resourcePack, this.getPackHash());
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index bc67e1a997d59408b00c333184d9f8dcc6cb262a..bf43c4f5544e12e5b95182cd3a813b1fe21dec40 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -316,7 +316,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
         ++this.tickCount;
         this.knownMovePacketCount = this.receivedMovePacketCount;
         if (this.clientIsFloating && !this.player.isSleeping() && !this.player.isPassenger()) {
-            if (++this.aboveGroundTickCount > 80) {
+            if (++this.aboveGroundTickCount > MinecraftServer.TPS * 4) { // Brilliant
                 ServerGamePacketListenerImpl.LOGGER.warn("{} was kicked for floating too long!", this.player.getName().getString());
                 this.disconnect(com.destroystokyo.paper.PaperConfig.flyingKickPlayerMessage, org.bukkit.event.player.PlayerKickEvent.Cause.FLYING_PLAYER); // Paper - use configurable kick message & kick event cause
                 return;
@@ -335,7 +335,7 @@ public class ServerGamePacketListenerImpl implements ServerPlayerConnection, Ser
             this.vehicleLastGoodY = this.lastVehicle.getY();
             this.vehicleLastGoodZ = this.lastVehicle.getZ();
             if (this.clientVehicleIsFloating && this.player.getRootVehicle().getControllingPassenger() == this.player) {
-                if (++this.aboveGroundVehicleTickCount > 80) {
+                if (++this.aboveGroundVehicleTickCount > MinecraftServer.TPS * 4) {
                     ServerGamePacketListenerImpl.LOGGER.warn("{} was kicked for floating a vehicle too long!", this.player.getName().getString());
                     this.disconnect(com.destroystokyo.paper.PaperConfig.flyingKickVehicleMessage, org.bukkit.event.player.PlayerKickEvent.Cause.FLYING_VEHICLE); // Paper - use configurable kick message & kick event cause
                     return;
diff --git a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
index befcb501b4b1b6330bf3cd53e00e30b01efade6f..4287a18464ff707d7c49acda51bc327b5fe556ac 100644
--- a/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerLoginPacketListenerImpl.java
@@ -94,7 +94,7 @@ public class ServerLoginPacketListenerImpl implements ServerLoginPacketListener
             }
         }
 
-        if (this.tick++ == 600) {
+        if (this.tick++ == 30 * MinecraftServer.TPS) { // Brilliant
             this.disconnect(new TranslatableComponent("multiplayer.disconnect.slow_login"));
         }
 
diff --git a/src/main/java/org/spigotmc/TicksPerSecondCommand.java b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
index 9bede6a26c08ede063c7a38f1149c811df14b258..3226eb1951b1a809f6744bb9d6b2a6c322886df1 100644
--- a/src/main/java/org/spigotmc/TicksPerSecondCommand.java
+++ b/src/main/java/org/spigotmc/TicksPerSecondCommand.java
@@ -47,7 +47,6 @@ public class TicksPerSecondCommand extends Command
     private boolean hasShownMemoryWarning; // Paper
     private static String format(double tps) // Paper - Made static
     {
-        return ( ( tps > 18.0 ) ? ChatColor.GREEN : ( tps > 16.0 ) ? ChatColor.YELLOW : ChatColor.RED ).toString()
-                + ( ( tps > 21.0 ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, 20.0 ); // Paper - only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise
+        return ( ( tps > (MinecraftServer.TPS * 0.9) ) ? ChatColor.GREEN : ( tps > (MinecraftServer.TPS * 0.8) ) ? ChatColor.YELLOW : ChatColor.RED ).toString() + ( ( tps > Integer.valueOf(MinecraftServer.TPS).doubleValue() ) ? "*" : "" ) + Math.min( Math.round( tps * 100.0 ) / 100.0, Integer.valueOf(MinecraftServer.TPS).doubleValue() ); // Paper - only print * at 21, we commonly peak to 20.02 as the tick sleep is not accurate enough, stop the noise // Brilliant - Overwrite it since tps is unlocked
     }
 }
diff --git a/src/main/java/tech/skyouo/brilliant/BrilliantConfig.java b/src/main/java/tech/skyouo/brilliant/BrilliantConfig.java
index 5aef0270a266c0609283299c162c7d9ef9e47977..caa56e7fe741631523d09c0f50f7d081c1efd639 100644
--- a/src/main/java/tech/skyouo/brilliant/BrilliantConfig.java
+++ b/src/main/java/tech/skyouo/brilliant/BrilliantConfig.java
@@ -146,4 +146,9 @@ public class BrilliantConfig {
         }
         return builder.build();
     }
+
+    public static int tpsLimit = 20;
+    private static void setTpsLimit() {
+        tpsLimit = getInt("tps.limit", tpsLimit);
+    }
 }
